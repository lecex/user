// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/log/log.proto

package log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Logs service

type LogsService interface {
	// 获取日志列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 根据 唯一 获取日志
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建日志
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type logsService struct {
	c    client.Client
	name string
}

func NewLogsService(name string, c client.Client) LogsService {
	return &logsService{
		c:    c,
		name: name,
	}
}

func (c *logsService) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Logs.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Logs.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Logs.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Logs.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logs service

type LogsHandler interface {
	// 获取日志列表
	List(context.Context, *Request, *Response) error
	// 根据 唯一 获取日志
	Get(context.Context, *Request, *Response) error
	// 创建日志
	Create(context.Context, *Request, *Response) error
	Delete(context.Context, *Request, *Response) error
}

func RegisterLogsHandler(s server.Server, hdlr LogsHandler, opts ...server.HandlerOption) error {
	type logs interface {
		List(ctx context.Context, in *Request, out *Response) error
		Get(ctx context.Context, in *Request, out *Response) error
		Create(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
	}
	type Logs struct {
		logs
	}
	h := &logsHandler{hdlr}
	return s.Handle(s.NewHandler(&Logs{h}, opts...))
}

type logsHandler struct {
	LogsHandler
}

func (h *logsHandler) List(ctx context.Context, in *Request, out *Response) error {
	return h.LogsHandler.List(ctx, in, out)
}

func (h *logsHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.LogsHandler.Get(ctx, in, out)
}

func (h *logsHandler) Create(ctx context.Context, in *Request, out *Response) error {
	return h.LogsHandler.Create(ctx, in, out)
}

func (h *logsHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.LogsHandler.Delete(ctx, in, out)
}
